libobby
=======

Blocker:

Critical:

Major:

Normal:
  * Provide some means of authentication (#21)
  * Hide equivalent insert / change calls (#28)
  * Implement records to (un)indent lines of text (#30)
  * Undo/Redo (#39)
  * Exchange version information (#42)

Minor:

Trivial:

Enhancement:
  * Session serialisation (#20)
  * Implement server-side commands for remote actions (#29)
  * Document owners (#38)


21: Provide some means of authentication
----------------------------------------
''libobby'' should provide some means of authentication. There should be 
several possibilities of authentication schemes (maybe this ticket should 
be splitted when they are getting implemented one-by-one):

 * If a user logs in the first time since the host restarted a password 
specified by the user will be set on the server with which it could 
authenticate itself after a connection loss.
 * A simple global password is need to login into a server, known to all 
users of it.
 * The server checks a user/password combination against a user database, 
useful for dedicated private ''obby'' servers.
 * Single documents could be get some kind of password or access control 
list protection, but #10 has to be implemented first.

28: Hide equivalent insert / change calls
-----------------------------------------
Hide equivalent insert / change calls

''This is a stub and generated out of the old TODO located in the 
repository.''

30: Implement records to (un)indent lines of text
-------------------------------------------------
Implement indent_record and unindent_record to (un)indent lines of text

''This is a stub and generated out of the old TODO located in the 
repository.''

39: Undo/Redo
-------------
The current undo/redo implementation is taken directly from GtkSourceView. 
This is not good because text that other people have written may be undone. 
We need a proper undo/redo handling in libobby.

42: Exchange version information
--------------------------------
The client should send it's version of libobby when sending the login 
packet. The server may compare the versions and detect protocol 
incompability and drop a corresponding error message.

20: Session serialisation
-------------------------
When multiple persons are editing a document the situation that one 
(perhaps the host) has to leave is quite common. ''libobby'' should support 
some kind of session serialisation while preserving the history (and thus 
the attribution of each character to the corresponding user) so that it 
could be easily resumed. Probably (possibly compressed) XML should be used 
to serialise a tree of objects. The following features should be 
implemented:

 * Load/save documents to/from file and/or memory (while preserving 
history)
 * Load/save complete obby session

29: Implement server-side commands for remote actions
-----------------------------------------------------
The possibility to send server-side commands would enable one to e.g. save 
the current document to a directory on the server or to perform other 
actions. ''libobby'' should provide the framework for this and ''Gobby'' 
some command interface to submit such commands to the server.

38: Document owners
-------------------
Documents should store their author. This would allow two possibilites:

 * The owner could give different people privilegies to access his 
document, such as ''none'', ''read'', ''read/write''.
 * The document itself is no longer identified by its ID but by its ID 
'''and''' the ID of the document owner. This allows that a document appears 
immediately on the client side without waiting for server acknowledegment 
because the identifications for a document cannot conflict.

